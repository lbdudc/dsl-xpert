/******************************************************************************
 * This file was generated by langium-cli 3.2.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/
import { AbstractAstReflection } from 'langium';
export const BnfTerminals = {
    STRING: /("((\\([\s\S]))|((?!(\\|"))[\s\S]*?))*")/,
    NUMBER: /[0-9]+/,
    CHAR: /((([a-z]|[A-Z])|[0-9])|_)/,
    ID: /(<(([a-z]|[A-Z])|_)((([a-z]|[A-Z])|[0-9])|_)*>)/,
    WS: /(( |	)|\r)+/,
    SPECIAL_CHAR: /((\*|\+)|\?)/,
    EOL: /(\r?\n)/,
};
export const Alternative = 'Alternative';
export function isAlternative(item) {
    return reflection.isInstance(item, Alternative);
}
export const Element = 'Element';
export function isElement(item) {
    return reflection.isInstance(item, Element);
}
export const Group = 'Group';
export function isGroup(item) {
    return reflection.isInstance(item, Group);
}
export const Model = 'Model';
export function isModel(item) {
    return reflection.isInstance(item, Model);
}
export const OptionalGroup = 'OptionalGroup';
export function isOptionalGroup(item) {
    return reflection.isInstance(item, OptionalGroup);
}
export const Rule = 'Rule';
export function isRule(item) {
    return reflection.isInstance(item, Rule);
}
export class BnfAstReflection extends AbstractAstReflection {
    getAllTypes() {
        return [Alternative, Element, Group, Model, OptionalGroup, Rule];
    }
    computeIsSubtype(subtype, supertype) {
        switch (subtype) {
            default: {
                return false;
            }
        }
    }
    getReferenceType(refInfo) {
        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;
        switch (referenceId) {
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }
    getTypeMetaData(type) {
        switch (type) {
            case Alternative: {
                return {
                    name: Alternative,
                    properties: [
                        { name: 'elements', defaultValue: [] }
                    ]
                };
            }
            case Element: {
                return {
                    name: Element,
                    properties: [
                        { name: 'group' },
                        { name: 'optional' },
                        { name: 'reference' },
                        { name: 'special' },
                        { name: 'terminal' }
                    ]
                };
            }
            case Group: {
                return {
                    name: Group,
                    properties: [
                        { name: 'elements', defaultValue: [] }
                    ]
                };
            }
            case Model: {
                return {
                    name: Model,
                    properties: [
                        { name: 'rules', defaultValue: [] }
                    ]
                };
            }
            case OptionalGroup: {
                return {
                    name: OptionalGroup,
                    properties: [
                        { name: 'elements', defaultValue: [] }
                    ]
                };
            }
            case Rule: {
                return {
                    name: Rule,
                    properties: [
                        { name: 'alternatives', defaultValue: [] },
                        { name: 'name' }
                    ]
                };
            }
            default: {
                return {
                    name: type,
                    properties: []
                };
            }
        }
    }
}
export const reflection = new BnfAstReflection();
//# sourceMappingURL=ast.js.map